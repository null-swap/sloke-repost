package cc.sleek.client.module.impl.exploit;

import cc.sleek.client.event.impl.PacketEvent;
import cc.sleek.client.event.impl.UpdateEvent;
import cc.sleek.client.module.Module;
import cc.sleek.client.module.api.Category;
import cc.sleek.client.module.api.ModuleInfo;
import cc.sleek.client.property.impl.BooleanValue;
import cc.sleek.client.property.impl.EnumValue;
import cc.sleek.client.property.impl.NumberValue;
import cc.sleek.client.util.ChatUtil;
import cc.sleek.client.util.IPacketUtil;
import cc.sleek.client.util.StringUtil;
import cc.sleek.client.util.TimedPacket;
import io.github.nevalackin.homoBus.Listener;
import io.github.nevalackin.homoBus.annotations.EventLink;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.ChatComponentText;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

@ModuleInfo(
        name = "Disabler",
        description = "Disables AntiCheat checks",
        category = Category.EXPLOIT
)
public class Disabler extends Module implements IPacketUtil {

    private final EnumValue<Mode> mode = new EnumValue<>("Mode", Mode.values());
    private final BooleanValue flying = new BooleanValue("Flying", false, () -> mode.getValue() == Mode.ABILITES);
    private final BooleanValue allowFlying = new BooleanValue("Allow Flying", false, () -> mode.getValue() == Mode.ABILITES);
    private final BooleanValue creative = new BooleanValue("Creative", false, () -> mode.getValue() == Mode.ABILITES);
    private final BooleanValue invulnerable = new BooleanValue("Invulnerable", false, () -> mode.getValue() == Mode.ABILITES);
    private final BooleanValue maxC0C = new BooleanValue("Max C0C", false, () -> mode.getValue() == Mode.VEHICLE);
    private final BooleanValue test = new BooleanValue("Test", false, () -> mode.getValue() == Mode.VEHICLE);
    private final BooleanValue transactions = new BooleanValue("Transactions", false, () -> mode.getValue() == Mode.PING_SPOOF);
    private final BooleanValue keepAlives = new BooleanValue("Keep Alives", false, () -> mode.getValue() == Mode.PING_SPOOF);
    private final NumberValue<Integer> delay = new NumberValue<>("Delay", 1000, 0, 18000, 50, () -> mode.getValue() == Mode.PING_SPOOF);
    private final LinkedList<Packet> packetQueue = new LinkedList<>();
    private final LinkedList<TimedPacket> packetQueue2 = new LinkedList<>();
    private int ticks;
    @EventLink
    Listener<PacketEvent> packetEventListener = event -> {
        switch (mode.getValue()) {
            case GHOSTLY:
                if (event.getPacket() instanceof S00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
//                    PacketUtil.sendPacketNoEvent(new C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, (mc.thePlayer.ticksExisted % 2 == 0), (mc.thePlayer.ticksExisted % 2 != 0)));
                    IPacketUtil.sendPacketNoEvent(new C0CPacketInput());
                }
                if (event.getPacket() instanceof C0CPacketInput) {
                    final C0CPacketInput packet = new C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, (mc.thePlayer.ticksExisted % 2 == 0), (mc.thePlayer.ticksExisted % 2 != 0));
                    event.setPacket(packet);
                }
                if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                    C03PacketPlayer.C06PacketPlayerPosLook packet = event.getPacket();
                    event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), packet.isOnGround()));
                }
                break;

            case HYPIXEL_STRAFE: {
                if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                    if (mc.thePlayer != null) {
                        if (mc.thePlayer.ticksExisted > 5 && mc.thePlayer.ticksExisted < 80) {
                            event.setCancelled(true);
                            mc.thePlayer.setPositionAndRotation(((S08PacketPlayerPosLook) event.getPacket()).getX(), ((S08PacketPlayerPosLook) event.getPacket()).getY(), ((S08PacketPlayerPosLook) event.getPacket()).getZ(), ((S08PacketPlayerPosLook) event.getPacket()).getYaw(), ((S08PacketPlayerPosLook) event.getPacket()).getPitch());
                        }
                    }

                }
                break;
            }
            case VERUS_COMBAT:
                // delay transactions
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                    packetQueue.add(event.getPacket());

                }
                // cancel all C0B
                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }
                break;
            case ABILITES:
                if (event.getPacket() instanceof C13PacketPlayerAbilities) {
                    C13PacketPlayerAbilities c13 = event.getPacket();
                    c13.setFlying(flying.getValue());
                    c13.setInvulnerable(invulnerable.getValue());
                    c13.setCreativeMode(creative.getValue());
                    c13.setAllowFlying(allowFlying.getValue());

                }
                break;
            case VEHICLE:
                if (event.getPacket() instanceof C03PacketPlayer) {
                    float strafe = maxC0C.getValue() ? Float.MAX_VALUE : mc.thePlayer.moveStrafing;
                    float forward = maxC0C.getValue() ? Float.MAX_VALUE : mc.thePlayer.moveForward;
                    IPacketUtil.sendPacketNoEvent(new C0CPacketInput(strafe, forward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak));
                    if (test.getValue()) {
                        event.setCancelled(true);
                        C03PacketPlayer c03 = event.getPacket();
                        IPacketUtil.sendPacketNoEvent(new C03PacketPlayer.C05PacketPlayerLook(c03.getYaw(), c03.getPitch(), c03.isOnGround()));
                    }
                }
                break;
            case PING_SPOOF:
                if (event.getPacket() instanceof C0FPacketConfirmTransaction && transactions.getValue()) {
                    IPacketUtil.sendDelayPacket(event.getPacket(), delay.getValue());
                }
                if (event.getPacket() instanceof C00PacketKeepAlive && keepAlives.getValue()) {
                    IPacketUtil.sendDelayPacket(event.getPacket(), delay.getValue());
                }
                break;
            case HOLY_PVP:
                onCTransaction(event, packet -> {
                    if (packetQueue.size() % 3 == 0) {
                        IPacketUtil.sendPacket(new C0CPacketInput());
                    }
                    event.setCancelled(true);
                    packetQueue.add(packet);
                });
                onCKeepAlive(event, c00PacketKeepAlive -> {
                    packetQueue.add(c00PacketKeepAlive);
                    event.setCancelled(true);
                });
                onSPosLook(event, p -> {

                    mc.thePlayer.addChatMessage(
                            new ChatComponentText("Funny on tick "
                                    + mc.thePlayer.ticksExisted + " (" +
                                    "S: " + packetQueue.size() + ")"));
                    double dx = p.getX() - mc.thePlayer.posX;
                    double dy = p.getY() - mc.thePlayer.posY;
                    double dz = p.getZ() - mc.thePlayer.posZ;
                    double dist = Math.sqrt(dx * dx + dy * dy + dz * dz);

                    if (dist < 5) {
                        IPacketUtil.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook(
                                p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), true));
                        event.setCancelled(true);
                    }
                });
                break;
            case S08_REJECTION:
                onSPosLook(event, s08PacketPlayerPosLook -> {
                    if (mc.thePlayer == null) return;

                    event.setCancelled(true);
                    packetQueue.add(s08PacketPlayerPosLook);
                    if (mc.thePlayer.ticksExisted < 10 || mc.thePlayer.getDistance(s08PacketPlayerPosLook.getX(), s08PacketPlayerPosLook.getY(), s08PacketPlayerPosLook.getZ()) > 8) {
                        mc.thePlayer.setPositionAndRotation(s08PacketPlayerPosLook.getX(), s08PacketPlayerPosLook.getY(), s08PacketPlayerPosLook.getZ(), s08PacketPlayerPosLook.getYaw(), s08PacketPlayerPosLook.getPitch());
                        ChatUtil.log("Rejected S08 but updated position to avoid desync");
                    } else {
                        IPacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(), s08PacketPlayerPosLook.getY(), s08PacketPlayerPosLook.getZ(), s08PacketPlayerPosLook.getYaw(), s08PacketPlayerPosLook.getPitch(), true));
                    }
                });
                break;
            case C06_REJECTION:
                onCPacketPlayer(event, c03PacketPlayer -> {
                    if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                        event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(c03PacketPlayer.x, c03PacketPlayer.y, c03PacketPlayer.z, c03PacketPlayer.onGround));
                    }
                });
                break;
            case PULSE:
                if (mc.thePlayer != null && mc.thePlayer.ticksExisted > 5) {
                    event.setCancelled(true);
                    packetQueue2.add(create(event.getPacket()));
                } else {
                    packetQueue2.clear();
                }
                break;
            case ZONECRAFT:
//                if (event.getPacket() instanceof S08PacketPlayerPosLook) {
//                    if ((mc.thePlayer != null && mc.thePlayer.ticksExisted > 5) && mc.thePlayer.ticksExisted % 20 != 0) {
//                        event.setCancelled(true);
//                    }
//                }
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    IPacketUtil.sendDelayPacket(event.getPacket(), 5000);
                }

                break;
        }
    };

    @EventLink
    Listener<UpdateEvent> updateEventListener = event -> {
        setSuffix(StringUtil.capitalize(StringUtil.getModeName(mode.getValue().name())));
        switch (mode.getValue()) {
            case VERUS_COMBAT:
                if (mc.thePlayer.ticksExisted % 180 == 0) {
                    do {
                        Packet packet = packetQueue.poll();
                        if (packet != null) {
                            IPacketUtil.sendPacketNoEvent(packet);
                        }
                    } while (packetQueue.size() > 22);
                }
                break;
            case ZONECRAFT:
                // avoid flagging NoFall A
                event.setOnGround(event.getY() % 0.015625 == 0);
                break;
            case SPECTATE:
                ticks++;
                // I don't know what the tick values should be here.
                if (ticks > 10) {
                    mc.getNetHandler().getNetworkManager().sendPacketNoEvent(new C18PacketSpectate());
                    ticks = 0;
                }
                break;
            case GHOSTLY:
                if (event.isPre()) {
                    IPacketUtil.sendPacket(new C00PacketKeepAlive(0));
                    if (mc.thePlayer.ticksExisted % 3 == 0) {
                        IPacketUtil.sendPacket(new C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, (mc.thePlayer.ticksExisted % 2 == 0), (mc.thePlayer.ticksExisted % 2 != 0)));
                        IPacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                    }
                }
                break;
            case HOLY_PVP:
                if (event.isPre())
                    return;

                if (packetQueue.size() % 19 == 0) {
                    event.setY(0.1);
                }

                if (packetQueue.size() > 300) {
                    do {
                        IPacketUtil.sendPacketNoEvent(packetQueue.poll());
                    } while (packetQueue.size() > 200);
                }
                break;
            case PULSE:
                if (!packetQueue2.isEmpty()) {
                    List<TimedPacket> timedPackets = new ArrayList<>();
                    packetQueue2.forEach(packet -> {
                        if (packet.postAddTime() >= 2000) {
                            packet.sendSilent();
                            timedPackets.add(packet);
                        }
                    });
                    packetQueue2.removeIf(timedPackets::contains);
                }
                break;
            case S08_REJECTION:
//                if (mc.thePlayer.ticksExisted % 100 == 0) {
//                    for (Packet packet : packetQueue) {
//                        packet.processPacket(mc.getNetHandler());
//                    }
//                    packetQueue.clear();
//                }

        }
    };


    private enum Mode {
        GHOSTLY, HYPIXEL_STRAFE, SPECTATE, VERUS_COMBAT, ABILITES, VEHICLE, PING_SPOOF, HOLY_PVP, PULSE, S08_REJECTION, ZONECRAFT, C06_REJECTION
    }
}


