package cc.sleek.client.module.impl.exploit;

import cc.sleek.client.event.impl.PacketEvent;
import cc.sleek.client.event.impl.UpdateEvent;
import cc.sleek.client.module.Module;
import cc.sleek.client.module.api.Category;
import cc.sleek.client.module.api.ModuleInfo;
import cc.sleek.client.property.impl.BooleanValue;
import cc.sleek.client.property.impl.NumberValue;
import cc.sleek.client.util.MathUtil;
import cc.sleek.client.util.IPacketUtil;
import cc.sleek.client.util.Stopwatch;
import io.github.nevalackin.homoBus.Listener;
import io.github.nevalackin.homoBus.annotations.EventLink;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;

import java.util.concurrent.CopyOnWriteArrayList;

@ModuleInfo(name = "Blink", description = "Blink", category = Category.EXPLOIT)
public class Blink extends Module {

    private final CopyOnWriteArrayList<Packet> packets = new CopyOnWriteArrayList<>();
    private final Stopwatch stopwatch = new Stopwatch();
    private final BooleanValue pulse = new BooleanValue("Pulse", false);
    private final BooleanValue useMS = new BooleanValue("Realtime", true, () -> pulse.getValue());
    private final NumberValue<Integer> msDelay = new NumberValue<>("Realtime Delay", 250, 0,  5000, 5, () -> useMS.getValue());
    private final NumberValue<Integer> tickDelay = new NumberValue<>("Tick Delay", 1, 0, MathUtil.toTicks(5), 1, () -> !useMS.getValue() && pulse.getValue());

    @EventLink
    Listener<PacketEvent> packetEventListener;
    @EventLink
    Listener<UpdateEvent> updateEventListener;

    public Blink() {
        // code be like:
        packetEventListener = event -> {
            if (event.isSending() && mc.thePlayer != null && mc.thePlayer.ticksExisted > 5) {
                packets.add(event.getPacket());
                event.setCancelled(true);
            }
        };
        updateEventListener = event -> {
            setSuffix(String.format("%s Packets", packets.size()));
            if (event.isPre()) {
                if (pulse.getValue()) {
                    if (useMS.getValue()) {
                        if (stopwatch.timeElapsed(msDelay.getValue())) {
                            stopwatch.resetTime();
                            for (Packet packet : packets) {
                                IPacketUtil.sendPacketNoEvent(packet);
                            }
                            packets.clear();
                        }
                    } else {
                        if (mc.thePlayer.ticksExisted % tickDelay.getValue() == 0) {
                            for (Packet packet : packets) {
                                IPacketUtil.sendPacketNoEvent(packet);
                            }
                            packets.clear();
                        }
                    }
                }
            }
        };
    }

    public void onEnable() {
        packets.clear();
        stopwatch.resetTime();
    }

    public void onDisable() {
        for (Packet<? extends INetHandlerPlayServer> packet : packets) {
            IPacketUtil.sendPacketNoEvent(packet);
        }
        packets.clear();
    }
}
